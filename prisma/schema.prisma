// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  user
  admin
  superadmin
}
enum orderStatus {
  pending
  shipped
  delivered
}
enum paymentStatus {
  pending
  failed
  completed
}

enum productStatus {
  available
  out_of_stock
}

model User {
  id    String    @id @default(uuid())
  email String @unique
  firstName String
  lastName String
  password String
  confirm_password String
  role Role
  isVerified  Boolean @default(false)
  status String @default("disactive")
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  products Product[]
  orders Order[]
  payments Payment[]
}


model Product {
  product_id    String    @id @default(uuid())
  name String
  description String
  price Float
  stock_quantity String
  status productStatus @default(available)
  user_id String
  user User @relation(fields: [user_id], references: [id])
  orderItems OrderItem[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Order {
  order_id    String    @id @default(uuid())
  user_id String
  user User @relation(fields: [user_id], references: [id])
  status orderStatus @default(pending)
  order_items OrderItem[]
  total_amount Float @default(0)
  payments Payment[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}


model OrderItem {
  order_item_id    String    @id @default(uuid())
  order_id String @unique
  order Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product_id String
  product Product @relation(fields: [product_id], references: [product_id])
  quantity Int
  total_price Float 
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Payment {
  payment_id   String    @id @default(uuid())
  order_id String @unique
  user_id String
  user User @relation(fields: [user_id], references: [id])
  order Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  payment_method String
  payment_status paymentStatus @default(pending)
  amount Float @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}